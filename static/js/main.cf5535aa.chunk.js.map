{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["date","dateString","parseInt","dateStringApiToInputFormat","day","month","year","allSquaresIndexes","y","x","squareIndexes","i","j","activeSquareIndex","StyledSudoku","styled","cellStyleVariations","focused","css","connected","connectedNumber","incorrect","inputtedManually","inputtedManuallyError","StyledCell","state","Cell","pos","onClick","onClickHandler","className","apiKey","useState","editCellState","useCallback","gridCopy","cell","setGridValues","getSameNumberCells","cellsIndexes","gridValues","getErrorCells","errorRows","row","errorIndexes","occurences","Array","fill","index","positions","errorColumns","column","errorSquares","cellIndex","Set","flat","cellUpdateKeyboard","cellFocus","Math","connectedRow","connectedColumn","connectedSquares","mergedArray","getConnectedCellsIndexes","useEffect","a","setLoading","setError","fetch","headers","response","console","data","content","locked","annotation","error","getSudokuData","keyboardCallback","key","isNaN","isNoteMode","window","type","onChange","target","setDateState","dateStringInputToApiFormat","value","dateState","loading","setIsNoteMode","name","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf5535aa.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport styled, { css } from 'styled-components'\n\nconst date = new Date()\nconst dateString = `${\n  parseInt(date.getDate()) < 10 ? '0' + date.getDate() : date.getDate()\n}-${\n  parseInt(date.getMonth() + 1) < 10\n    ? '0' + date.getMonth() + 1\n    : date.getMonth() + 1\n}-${date.getFullYear()}`\n\n// API requires a DD/MM/YYYY format and the input field in html takes in a YYYY/MM/DD so we gotta convert\n\nconst dateStringInputToApiFormat = (dateString) => {\n  // YYYY / MM / DD to DD / MM / YYYY\n  const year = dateString.slice(0, 4)\n  const month = dateString.slice(5, 7)\n  const day = dateString.slice(8)\n  return `${day}-${month}-${year}`\n}\n\nconst dateStringApiToInputFormat = (dateString) => {\n  // DD / MM / YYYY to YYYY / MM / DD\n  const day = dateString.slice(0, 2)\n  const month = dateString.slice(3, 5)\n  const year = dateString.slice(6)\n  return `${year}-${month}-${day}`\n}\n\nconst allSquaresIndexes = []\nfor (let y = 0; y < 3; y++) {\n  for (let x = 0; x < 3; x++) {\n    // MAKING SQUARE\n    const squareIndexes = []\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        const activeSquareIndex = (i + y * 3) * 9 + j + x * 3\n        squareIndexes.push(activeSquareIndex)\n      }\n    }\n    allSquaresIndexes.push(squareIndexes)\n  }\n}\n\nconst StyledSudoku = styled.div`\n  * {\n    font-family: sans-serif;\n  }\n  width: 450px;\n\n  .head {\n    padding: 8px 0;\n  }\n\n  .sudoku-table {\n    table-layout: fixed;\n    padding: 0;\n    width: 100%;\n    border-collapse: collapse;\n    border: 3px solid rgb(52, 72, 97);\n    border-spacing: 0;\n    background: white;\n\n    tbody {\n      tr {\n        &:nth-child(3n) {\n          border-bottom: 3px solid rgb(52, 72, 97);\n        }\n        td {\n          padding: 0;\n          margin: 0;\n          height: 50px;\n          width: 50px;\n          border: 2px solid #b9cce4;\n          text-align: center;\n          font-size: 15px;\n\n          &:nth-child(3n) {\n            border-right: 3px solid rgb(52, 72, 97);\n          }\n        }\n      }\n    }\n  }\n\n  .buttons {\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: center;\n    justify-content: space-between;\n    padding: 8px 4px;\n\n    .right {\n      display: flex;\n      flex-flow: row nowrap;\n      align-items: center;\n      justify-content: space-between;\n    }\n  }\n`\n\nconst cellStyleVariations = {\n  focused: css`\n    background: #a9c9d3;\n  `,\n  connected: css`\n    background: #cee2e9;\n  `,\n  connectedNumber: css`\n    /* background: #c4cad6; */\n    background: #d6d3f0;\n  `,\n  incorrect: css`\n    background: #dda4a4;\n  `,\n  inputtedManually: css`\n    color: #6767aa;\n  `,\n  inputtedManuallyError: css`\n    color: a73434;\n  `\n}\n\nconst StyledCell = styled.div`\n  user-select: none;\n  cursor: pointer;\n  width: 100%;\n  height: 100%;\n  font-size: 30px;\n  ${({ state }) => state.focused && cellStyleVariations.focused};\n  ${({ state }) => state.connected && cellStyleVariations.connected};\n  ${({ state }) =>\n    state.connectedNumber && cellStyleVariations.connectedNumber};\n  ${({ state }) => state.incorrect && cellStyleVariations.incorrect};\n  ${({ state }) => !state.locked && cellStyleVariations.inputtedManually};\n  position: relative;\n\n  .content {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .annotation {\n    position: absolute;\n    top: 10%;\n    left: 10%;\n    font-size: 12px;\n  }\n`\n\nconst Cell = ({ children, annotation, state, onClickHandler, pos }) => {\n  return (\n    <StyledCell state={state} onClick={onClickHandler}>\n      <div className='annotation'>{state.annotation}</div>\n      <div className='content'>{children}</div>\n    </StyledCell>\n  )\n}\n\nconst API_ENDPOINT = 'https://papergames-hetic.herokuapp.com/sudoku/'\n// const API_ENDPOINT_LOCAL = 'http://localhost:3001/sudoku/'\nconst SELECT_ALL = 'SELECT_ALL'\n\nconst Sudoku = ({ apiKey }) => {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n\n  const [gridValues, setGridValues] = useState('')\n\n  const [isNoteMode, setIsNoteMode] = useState(false)\n\n  const [dateState, setDateState] = useState(dateString)\n\n  // no longer correct\n  // const checkGrid = () => gridValues === sudoku.solution\n\n  const clearInputs = () => {\n    let gridCopy = [...gridValues]\n    gridCopy = gridCopy.map((cell) => ({\n      ...cell,\n      content: cell.locked ? cell.content : null,\n      focused: false,\n      connected: false,\n      connectedNumber: false,\n      incorrect: false,\n      annotation: ''\n    }))\n    setGridValues(gridCopy)\n  }\n\n  const editCellState = useCallback(\n    (pos, prop, value) => {\n      const gridCopy = [...gridValues]\n      if (pos === SELECT_ALL) {\n        for (const cell of gridCopy) cell[prop] = value\n      } else {\n        if (typeof pos === 'number') {\n          gridCopy[pos][prop] = value\n        } else {\n          for (const p of pos) {\n            gridCopy[p][prop] = value\n          }\n        }\n      }\n      setGridValues(gridCopy)\n    },\n    [gridValues]\n  )\n\n  const getConnectedCellsIndexes = (pos) => {\n    const column = Math.floor(pos / 9)\n    const row = pos % 9\n    const connectedRow = new Array(9)\n      .fill('')\n      .map((_, index) => column * 9 + index)\n    const connectedColumn = new Array(9)\n      .fill('')\n      .map((_, index) => row + index * 9)\n    // const square = [Math.floor(column / 3) * 3, Math.floor(row / 3) * 3]\n    const connectedSquares = []\n    for (\n      let i = Math.floor(column / 3) * 3;\n      i < Math.floor(column / 3) * 3 + 3;\n      i++\n    ) {\n      for (\n        let j = Math.floor(row / 3) * 3;\n        j < Math.floor(row / 3) * 3 + 3;\n        j++\n      ) {\n        connectedSquares.push(i * 9 + j)\n      }\n    }\n\n    // flatten and remove duplicates from array\n    let mergedArray = [\n      ...new Set([connectedRow, connectedColumn, connectedSquares].flat())\n    ]\n    // remove self from array\n    mergedArray = mergedArray.filter((cell) => cell !== pos)\n    return mergedArray\n  }\n\n  const getSameNumberCells = useCallback(\n    (pos) => {\n      const cellsIndexes = []\n      gridValues\n        .filter((cell) => cell.content !== null)\n        .forEach(\n          (cell, index) =>\n            cell.content === gridValues[pos].content && cellsIndexes.push(index)\n        )\n      return cellsIndexes\n    },\n    [gridValues]\n  )\n\n  const getErrorCells = useCallback(() => {\n    const errorRows = []\n    for (let i = 0; i < 9; i++) {\n      let row = gridValues.slice(i * 9, i * 9 + 9)\n      const errorIndexes = []\n      // just keeping the content we dont need the rest and it allows the use of array functions like includes\n      row = row.map((cell, index) => cell.content)\n      const occurences = new Array(9).fill([])\n      row.forEach((cell, index) => {\n        if (cell !== null)\n          occurences[cell - 1] = [...occurences[cell - 1], index + i * 9]\n      })\n      occurences.forEach((positions, value) => {\n        if (positions.length >= 2) errorIndexes.push(positions)\n      })\n\n      errorRows.push(errorIndexes)\n    }\n\n    const errorColumns = []\n    for (let i = 0; i < 9; i++) {\n      // get columns\n      let column = gridValues.filter((_, index) => (index - i) % 9 === 0)\n      const errorIndexes = []\n      // just keeping the content we dont need the rest and it allows the use of array functions like includes\n      column = column.map((cell, index) => cell.content)\n      const occurences = new Array(9).fill([])\n      // console.log(column)\n      column.forEach((cell, index) => {\n        if (cell !== null)\n          occurences[cell - 1] = [...occurences[cell - 1], index * 9 + i]\n      })\n      occurences.forEach((positions, value) => {\n        if (positions.length >= 2) errorIndexes.push(positions)\n      })\n\n      errorColumns.push(errorIndexes)\n    }\n\n    const errorSquares = []\n    for (const squareIndexes of allSquaresIndexes) {\n      const errorIndexes = []\n      const occurences = new Array(9).fill([])\n      squareIndexes.forEach((cellIndex) => {\n        if (gridValues[cellIndex].content !== null)\n          occurences[gridValues[cellIndex].content - 1] = [\n            ...occurences[gridValues[cellIndex].content - 1],\n            cellIndex\n          ]\n      })\n      occurences.forEach((positions) => {\n        if (positions.length >= 2) errorIndexes.push(positions)\n      })\n\n      errorSquares.push(errorIndexes)\n    }\n\n    // remove duplicates and flatten\n    return [...new Set([errorRows, errorColumns, errorSquares].flat(3))]\n  }, [gridValues])\n\n  const cellUpdateKeyboard = useCallback(\n    (pos) => {\n      editCellState(SELECT_ALL, 'connectedNumber', false)\n      editCellState(SELECT_ALL, 'incorrect', false)\n      editCellState(getSameNumberCells(pos), 'connectedNumber', true)\n      editCellState(getErrorCells(), 'incorrect', true)\n    },\n    [editCellState, getErrorCells, getSameNumberCells]\n  )\n\n  const cellFocus = useCallback(\n    (pos) => {\n      // remove focus on all cells\n      editCellState(SELECT_ALL, 'focused', false)\n      editCellState(SELECT_ALL, 'connected', false)\n      // focus selected cell\n      editCellState(getConnectedCellsIndexes(pos), 'connected', true)\n      editCellState(pos, 'focused', true)\n    },\n    [editCellState]\n  )\n\n  // API REQUEST\n  useEffect(() => {\n    const getSudokuData = async () => {\n      setLoading(true)\n      setError(null)\n      try {\n        // eslint-disable-next-line no-undef\n        const response = await fetch(`${API_ENDPOINT}${dateState}`, {\n          headers: {\n            'Content-Type': 'application/json',\n            'api-key': apiKey\n          }\n        })\n        console.log(response)\n        const data = await response.json()\n        if (data.error) {\n          setError(data.error.toString())\n          return setLoading(false)\n        }\n        const gridValues = data.puzzle.map((content) => ({\n          content,\n          locked: !!content,\n          focused: false,\n          connected: false,\n          connectedNumber: false,\n          incorrect: false,\n          annotation: ''\n        }))\n        setGridValues(gridValues)\n      } catch (error) {\n        console.log(error)\n        setError(error.toString())\n      } finally {\n        setLoading(false)\n      }\n    }\n    getSudokuData()\n  }, [dateState])\n\n  // KEYBOARD EVENTS\n  useEffect(() => {\n    const keyboardCallback = ({ key }) => {\n      // check if key is a number (and !== 0), check if cell isn't locked then pass it to editing\n      if (!gridValues.find((cell) => cell.focused)) return\n      if (gridValues.find((cell) => cell.focused).locked) return\n      !isNaN(parseInt(key)) &&\n        parseInt(key) !== 0 &&\n        editCellState(\n          gridValues.findIndex((cell) => cell.focused),\n          isNoteMode ? 'annotation' : 'content',\n          parseInt(key)\n        )\n\n      // check for deletion with backspace or suppr\n      if (key === 'Backspace' || key === 'Delete') {\n        editCellState(\n          gridValues.findIndex((cell) => cell.focused),\n          isNoteMode ? 'annotation' : 'content',\n          null\n        )\n      }\n\n      !isNoteMode &&\n        cellUpdateKeyboard(gridValues.findIndex((cell) => cell.focused))\n    }\n\n    window.addEventListener('keydown', keyboardCallback)\n\n    return () => {\n      window.removeEventListener('keydown', keyboardCallback)\n    }\n  }, [editCellState, gridValues, isNoteMode, cellFocus, cellUpdateKeyboard])\n\n  return (\n    <StyledSudoku>\n      <div className='head'>\n        <span>Sudoku of </span>\n        <input\n          type='date'\n          onChange={({ target }) =>\n            setDateState(dateStringInputToApiFormat(target.value))\n          }\n          value={dateStringApiToInputFormat(dateState)}\n        />\n      </div>\n      {loading ? (\n        <div className='loader'>loading...</div>\n      ) : error ? (\n        <div className='error'>{error}</div>\n      ) : (\n        <table className='sudoku-table'>\n          <tbody>\n            {Array(9)\n              .fill(null)\n              .map((_, row) => (\n                <tr key={row}>\n                  {Array(9)\n                    .fill(null)\n                    .map((_, cell) => (\n                      <td key={cell}>\n                        <Cell\n                          state={gridValues[row * 9 + cell]}\n                          onClickHandler={() => cellFocus(row * 9 + cell)}\n                        >\n                          {gridValues[row * 9 + cell].content}\n                        </Cell>\n                      </td>\n                    ))}\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      )}\n\n      <div className='buttons'>\n        <button onClick={clearInputs} className='reset'>\n          reset\n        </button>\n        <div className='right'>\n          <div className='label'>Annotation mode :</div>\n          <input\n            onChange={({ target }) => setIsNoteMode(target.checked)}\n            type='checkbox'\n            name='note'\n          />\n        </div>\n      </div>\n    </StyledSudoku>\n  )\n}\n\nexport default Sudoku\n","import React from 'react'\n\nimport Sudoku from '@maximedruart/react-sudoku'\n\nconst App = () => <Sudoku apiKey='idksomekey' />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}